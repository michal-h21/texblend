#!/usr/bin/env texlua
kpse.set_program_name "luatex"
local lapp    = require "lapp-mk4"
-- mkutils needs the logging library
logging       = require "make4ht-logging"
local mkutils = require "mkutils"
local log = logging.new("TeXBlend")

local version_info = "TeXBlend version {{version}}"
local cmd_options = [[TeXBlend: Compiles Segments of LaTeX Documents

This tool compiles individual files that are included as parts of larger documents. 
It utilizes the preamble of the main document but disregards all other included files.

Usage: 

$ texblend [options] filename

Available options:
-h,--help                     Print the help message
-H,--HTML                     Compile to HTML using TeX4ht
-l,--lualatex                 Select lualatex as compiler explicitly
-o,--output (default "")      Set the output file name
-O,--texoptions (default "")  Extra options that should
-p,--pdflatex                 Select pdflatex as compiler explicitly
-P,--print                    Don't compile the document, print the expanded template instead
-s,--shell-escape             Enable execution of external commands in LaTeX
-t,--template (default "")    Use explicit template instead of the one provided in the input file
-v,--version                  Print version info
-x,--xelatex                  Select xelatex as compiler explicitly
<filename> (string)           Use "-" if you want to pass document from the standard input
]]


local default_template = [[\documentclass{article}
\begin{document}
\end{document}
]]



local function exit_on_error(status, msg)
  if not status then 
    log:error( msg)
    os.exit(1)
  end
end

local function get_preamble(text)
  -- try to get the document preamble
  local preamble = {}
  local found_begin = false
  for line in text:gmatch("([^\n]*)") do
    -- \begin{document} must be on a separate line, preceded only by whitespace
    if line:match("^%s*\\begin{document}") then 
      found_begin = true 
      break
    end
    preamble[#preamble + 1] = line
  end
  if found_begin then
    return table.concat(preamble, "\n")
  end
  return nil, "Cannot find \\begin{document} in the template. It must be placed on a separate line."
end

-- 
local function prepare_template(document, template)
  -- try to read document preamble from the template
  local preamble, msg = get_preamble(template)
  if not preamble then return nil, msg end
  -- fill template with the document
  return string.format("%s\n\\begin{document}\n%s\n\\end{document}\n", preamble, document)
end

local function get_metadata(content)
  -- for now, we support only TeXShop's style of metadata:
  -- % !TeX program = program 
  -- % !TeX root = root
  -- also variant with  % !TEX TS-var is supported
  -- program is used for the compilation and root is the template document
  local metadata = {}
  metadata.compiler = content:match("%%%s*![Tt][Ee][Xx] T?S?%-?program%s*=%s*([^%s]+)") or "pdflatex"
  metadata.root = content:match("%%%s*![Tt][Ee][Xx] T?S?%-?root%s*=%s*([^\n]+)") 
  if metadata.root then metadata.root = metadata.root:gsub("%s*$", "") end
  return metadata
end

local function use_arguments(metadata, arguments)
  -- this function modifies metadata using command line arguments
  -- remove empty strings from arguments
  for k, v in pairs(arguments) do
    if v == '""' then arguments[k] = nil end
  end
  -- handle output file name
  if arguments.output then
    metadata.output = mkutils.remove_extension(arguments.output)
  else
    -- base output filename on the input filename if we don't get explicit filename
    metadata.output = mkutils.remove_extension(arguments.filename)
  end
  -- handle compiler
  metadata.compiler = arguments.pdflatex and "pdflatex" or metadata.compiler
  metadata.compiler = arguments.lualatex and "lualatex" or metadata.compiler
  metadata.compiler = arguments.xelatex and "xelatex" or metadata.compiler

  
  return metadata
end

local function load_file(filename)
  -- universal function to read files
  if not filename then return nil, "No filename passed" end
  local f = io.open(filename, "r")
  if not f then return nil, string.format("Cannot open file: %s", filename) end
  local content = f:read("*all")
  f:close()
  return content
end

local function load_template(filename)
  -- with kpse, we can use root files in the local TEXMF tree, like ~/tex/latex/tpl/template.tex
  local filename = kpse.find_file(filename, "tex")
  return load_file(filename)
end

local function load_document(filename)
  -- load the input file and its metadata
  local content, msg = load_file(filename)
  if not content then return content, msg end
  return get_metadata(content), content
end


local function prepare_command(metadata)

end

local function compile(path, document)
end

-- process command line options
local arguments = lapp(cmd_options)

-- handle non file actions
-- arguments.help is handled automatically by lapp
if arguments.version then
  print(version_info)
  os.exit()
end


local metadata, document 
local filename = arguments.filename
if filename == "-" then
  -- read from the standard input if the filename is - 
  document = io.read("*all")
  metadata = get_metadata(document)
else
  -- otherwise, load the input file and get metadata
  metadata, document = load_document(filename)
end

exit_on_error(metadata, document)

-- enrich metadata with command line arguments
metadata = use_arguments(metadata, arguments)

-- user needs to add explicit output filename when dealing with the standard input
if metadata.output == "-" then
  exit_on_error(nil, "Empty output filename. Use the -o option")
end

print(metadata.compiler)
print(metadata.root)
print(metadata.output)
metadata.template, msg = metadata.root and load_template(metadata.root) or default_template

exit_on_error(metadata.template, msg)

local full_document, msg = prepare_template(document, metadata.template)

exit_on_error(full_document, msg)

local command = prepare_command(metadata)

print(full_document)


